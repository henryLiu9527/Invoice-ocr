---
description: 
globs: 
alwaysApply: true
---

# Your rule content

- You can @ files here
- You can use markdown but dont have to
系统架构和功能模块详细说明
系统架构
1. 技术栈
前端：HTML/CSS/JavaScript
后端：Python 3.8+ 和 Flask 框架
OCR服务：
主引擎：百度智能云OCR API
备用引擎：PaddleOCR (本地部署)
数据存储：临时文件存储和结果缓存
输出格式：XLSX、DOCX、TXT
部署：支持Docker容器化部署
2. 系统层次
表现层：Web界面，基于参考图片的单页面应用
业务逻辑层：
文件处理逻辑
OCR引擎调用和切换逻辑
数据转换和格式化
数据层：
临时文件存储
OCR结果缓存
日志记录
3. 数据流向
用户上传图片文件
系统验证文件并临时存储
根据用户选择的发票类型调用百度OCR
如百度OCR失败，自动切换到PaddleOCR
处理OCR结果为标准格式
转换为用户选择的输出格式
提供下载链接
功能模块
1. 前端界面模块
文件上传区域：拖放或选择文件上传
OCR引擎选择：百度OCR/PaddleOCR选项
发票类型选择：Auto、VAT、General、Receipt、Form等
处理状态显示：进度条和状态信息
结果预览区域：识别结果可视化展示
导出选项：XLSX、DOCX、TXT格式选择
错误和状态提示：反馈处理状态和问题
界面语言：所有前端界面文字使用英文
2. 文件管理模块
文件上传处理：接收和验证文件
格式验证：确保文件类型符合要求(PNG, JPG, JPEG, PDF, TIF, TIFF)
文件存储：安全地临时存储上传文件
文件预处理：根据需要进行图像优化处理
批处理管理：处理多文件上传(最多10个)
3. OCR引擎模块
百度OCR集成：
API认证和调用
各种发票类型的专用接口调用
错误处理和重试机制
PaddleOCR备用引擎：
模型加载和维护
通用识别和专用发票处理
性能优化
引擎切换控制：
失败检测逻辑
自动切换机制
状态恢复策略
4. 结果处理模块
OCR结果解析：解析API返回的JSON数据
数据结构化：将非结构化OCR结果转为结构化数据
数据验证：检查提取数据的合理性
字段映射：统一不同引擎的输出格式
结果缓存：临时存储处理结果
5. 导出模块
XLSX生成：使用pandas生成Excel格式
DOCX生成：使用python-docx生成Word文档
TXT生成：生成文本格式文件
下载管理：提供安全的文件下载机制
6. 日志系统模块
日志记录器：配置和管理日志
操作日志：记录用户操作和系统事件
错误日志：详细记录系统错误和异常
性能日志：记录处理时间和资源使用
日志轮转：管理日志文件大小和保留
7. 错误处理模块
异常捕获：捕获和处理各类异常
用户反馈：向用户提供友好的错误信息
恢复机制：从错误状态恢复
失败追踪：记录错误原因和上下文
8. Docker部署规范
基础镜像：
使用Python官方镜像为基础
指定具体版本(例如python:3.8-slim)避免兼容性问题
依赖管理：
使用requirements.txt管理Python依赖
优先安装核心依赖，减少构建时间
考虑PaddleOCR的特殊依赖要求
文件结构：
将应用代码放在/app目录
配置文件与代码分离，使用环境变量或配置卷挂载
数据持久化：
上传文件和结果使用数据卷(/app/data)
日志文件使用单独数据卷(/app/logs)
环境变量：
百度OCR API密钥通过环境变量传入
服务配置参数(端口、线程数等)通过环境变量配置
网络配置：
暴露5001端口
支持内部网络部署的网络配置
安全考虑：
非root用户运行应用
最小化容器权限
敏感信息不硬编码在镜像中
性能优化：
多阶段构建减小镜像体积
适当配置工作进程数量
PaddleOCR模型预加载机制
3. Web界面限制（更新）
界面布局保持一致：
保持所有功能在一个窗口内显示
维持原有的设计风格和色彩方案
保留关键功能区域的位置和大小
界面语言要求：
前端界面上所有文字必须使用英文
保持专业术语的准确性和一致性
允许的界面调整：
错误提示和状态反馈的改进
日志显示区域的添加（如需）
用户体验的小幅优化